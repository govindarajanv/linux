1	-	yum install vsftpd ftp
	-	/usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf &
	-	ps -ef|grep ftp
	-	ftp localhost
	-	killall vsftpd

2	-	/etc/init.d/vsftpd start
	-	ps -ef|grep ftp
	-	ftp localhost
	-	/etc/init.d/vsftpd stop
3	-	systemctl start vsftpd.service	
	-	systemctl status vsftpd.service
	-	ftp localhost
	-	systemctl stop vsftpd.service
4	-	systemctl enable vsftpd.service
	-	systemctl status vsftpd.service
5
6	
	-	#ip address show
	-	#ip route show
	-	cat /etc/resolv.conf
7	
	-	Edit /etc/sysconfig/network-scripts/ifcfg-<adaptername>

		DEVICE=<adapter-name>
		TYPE=ethernet
		BOOTPROTO=none
		IPADDR=10.0.2.15
		PREFIX=24
		GATEWAY=10.0.2.2
		DNS1=8.8.8.8
		NAME="LFSstatic"
		ONBOOT=yes	
	-	restart the networking services
8	-	First machine: ip addr add 10.200.45.100/24 dev eth0
	-	Second machine: ip addr add 10.200.45.110/24 dev eth0
	-	First machine: ping 10.200.45.110
	-	Second Machine: ping 10.200.45.100	
9	-	remove the /etc/sysconfig/network-scripts/ifcfg-<interfacename> file and restart the network services
10	-	Use the ping command to verify packets are dropping  #ping localhost
	-	While the ping is running, use tcpdump on another terminal session to see the packets sent and received
		#tcpdump -i lo proto ICMP
		You should see all the requests being sent, but a smaller number of responses

11	-	Use the netstat command to prove where the SMTP daemon is listening
		# netstat -taupe | grep smtp

	-	Use the telnet command to prove that the daemon is listening on localhost only
		Connect to the localhost interface
			-	telnet localhost 25
		Attempt to connect from a remote interface
			-	telnet X.Y.Z.A 25
12	-	Start a service
		# /etc/init.d/vsftpd start

	-	Check port with telnet
		#telnet localhost ftp

	-	Block the port by adding the following line to /etc/hosts.deny
		vsftpd: ALL
	
	-	Check port with telnet
		# telnet localhost ftp     // you should have got connection refused message

	-	Remove the line from /etc/hosts.deny to clean up the exercise
13	-	# ssh-keygen -t rsa -f $HOME/.ssh/id-rsa
		# eval $(ssh-agent)
		# ssh-add $HOME/.ssh/id-rsa
	-	# ssh-copy-id student@localhost
		# ssh student@localhost
		# id
		# exit
14	-	.ssh/config
		host garply
		hostname localhost
		user root
		host *
		ForwardX11 yes
	-	$ ssh garply
		$ hostname
		$ id
		$ exit
15	-	Edit the file /etc/ssh/sshd_config and make sure this line is present
		PermitRootLogin without-password

	-	Restart the sshd daemon.
		# systemctl restart sshd.service

	-	Copy the file /home/student/.ssh/authorized_keys to the directory /root/.ssh/ and make sure it is owned by the root user and group
		# cat /home/student/.ssh/authorized_keys >> /root/.ssh/authorized_keys
		# chown root.root /root/.ssh/authorized_keys
		# chmod 640 /root/.ssh/authorized_keys	
	-	Log in to the host garply again, to prove your ssh-key login works.
		$ ssh garply
		$ id
		$ hostname
		$ exit
16	-	ssh -X student@server xeyes
17	-	Install or verify pssh is installed
		#sudo yum install pssh
		#sudo rpm -ql pssh | grep bin

	-	Setup ssh keys and fingerprints If not already done, create a key pair on the local machine
		#ssh-keygen

	-	Copy the key to the remote and save the fingerprint
		# ssh-copy-id localhost

	-	Test the password-less connection, if you are prompted for anything fix it now
		#ssh localhost

	-	Create a ip-list file for pssh
		$ echo "127.0.0.1" > ~/ip-list
		$ echo "172.16.104.135" >> ~/ip-list
		$ echo "localhost" >> ~/ip-list
	
	-	Now try some commands with parallel-ssh to the local machine
		$ parallel-ssh -i -h ~/ip-list date
		$ parallel-ssh -i -h ~/ip-list sudo timedatectl
		$ parallel-ssh -i -h ~/ip-list sudo hostnamectl
18	-	Ensure VNC server is installed. # yum install tigervnc-server tigervnc
	-	Start the server  #vncserver
	-	Test the server with vncviewer.
		#vncviewer localhost:1
19	-	# vncviewer -via student@hostname localhost:1	
	-	# vncserver -kill :1

20	-	/etc/systemd/system/vncserver@.service
		[Unit]
		Description=Remote desktop service (VNC) on port :%I
		After=syslog.target network.target
		[Service]
		Type=forking
		User=student
		ExecStartPre=-/usr/bin/vncserver -kill :%i
		ExecStart=/usr/bin/vncserver :%i -localhost
		PIDFile=/home/lee/.vnc/%H:%i.pid
		ExecStop=-/usr/bin/vncserver -kill :%i
		[Install]
		WantedBy=multi-user.target

	-	#systemctl daemon-reload

	-	# systemctl start vncserver@42
		# systemctl start vncserver@43

	-	# vncviewer -via student@hostname localhost:42
		# vncviewer -via student@hostname localhost:43

	-	# systemctl enable vncserver@42
		# systemctl enable vncserver@42
21	-	Install the bind package
		# yum install bind

	-	Change the configuration to allow remote access.
		Edit the file /etc/named.conf and add or edit the file to contain this line inside
		the options block:
		listen-on port 53 { any; };
		allow-query { any; };

	-	Start the daemon
		# systemctl restart named.service
22	-	Create an entry in the named.conf file for your new zone
		zone "example.com." IN {
		type master;
		file "example.com.zone";
		};

	-	Create a new zone file for the example.com domain
		put your zone files in the directory /var/named/.

		$TTL 30
		@ IN SOA localhost. admin.example.com. (
		2012092901 ; serial YYYYMMDDRR format
		3H ; refresh
		1H ; retry
		2H ; expire
		1M) ; neg ttl
		IN NS localhost.;
		www.example.com. IN A 192.168.111.45
		www.example.com. IN AAAA fe80::22c9:d0ff:1ecd:c0ef
		foo.example.com. IN A 192.168.121.11
		bar.example.com. IN CNAME www.example.com.
		;generate one hundred entries host1 thru host100
		$GENERATE 1-100 host$.example.com. IN A 10.20.45.$

	-	Test your configuration with named-checkzone or named-checkconf -z
	-	Restart the named daemon
		# systemctl restart named

	-	Test your new DNS entries
		$ dig @localhost -t A www.example.com
		$ dig @localhost -t AAAA www.example.com
		$ dig @localhost -t A foo.example.com
		$ dig @localhost -t CNAME bar.example.com
		$ dig @localhost -t A host7.example.com
		$ dig @localhost -t A host37.example.com

23	-	Create an entry in the named.conf file for your new zone.
		Edit the file /etc/named.conf.

		zone "45.20.10.in-addr.arpa." IN {
		type master;
		file "45.20.10.in-addr.arpa.zone";
		};

	-	Create a new zone file for the "45.20.10.in-addr.arpa" domain
		put your zone files in the directory /var/named/

		$TTL 30
		@ IN SOA localhost. admin.example.com. (
		2012092901 ; serial YYYYMMDDRR format
		3H ; refresh
		1H ; retry
		2H ; expire
		1M) ; neg ttl
		@ IN NS localhost.;
		;generate 1-254
		$GENERATE 1-254 $ IN PTR host$.example.com.

	-	Test your configuration with named-checkzone or named-checkconf -z
	-	Reload the named daemon.
		# rndc reload

	-	Test your new DNS entries.
		$ host 10.20.45.7 localhost
		$ host 10.20.45.37 localhost
		$ host 10.20.45.73 localhost

24	-	Make sure Apache is installed
		# yum install httpd mod_ssl

	-	Create an index.html file to serve with Apache in the default DocumentRoot
		echo "Hello World" > /var/www/html/index.html

	-	Make sure Apache is enabled and started:
		# systemctl enable httpd
		# systemctl start httpd

	-	Verify the page you created is visible using a web browser
25	-	Create a temporary IP alias for your main Ethernet address
		# ip addr add 192.168.153.X/24 dev eth0
		Where X is a number no one else in the same LAN is using. Add this new address to /etc/hosts with the host name of ipvhost.example.com for ease of use later

	-	Create a new directory /ipvhost/
		# mkdir /ipvhost/

	-	Create an /ipvhost/index.html file.
	
	-	Verify that SELinux permissions (if enabled) are correct
		# chcon -R --reference=<YOUR-DOCUMENT-ROOT> /ipvhost/

	-	Create a new IP based virtual host definition. Add this stanza to the suggested file /etc/httpd/conf.d/ipvhost.conf
		<VirtualHost 192.168.153.X:80>
		DocumentRoot /ipvhost/
		ServerName ipvhost.example.com
		<Directory /ipvhost/>
		Options Indexes FollowSymLinks
		AllowOverride None
		Require all granted
		</Directory>
		</VirtualHost>	

	-	Restart the httpd service
		# systemctl restart httpd

	-	Test your new IP vhost as well as the original host	
26	-	Create a new name based virtual host definition. Create a new config file with the following contents
		<VirtualHost *:80>
		DocumentRoot <DOCUMENTROOT>
		ServerName _default_
		</VirtualHost>
		<VirtualHost *:80>
		DocumentRoot /namevhost/
		ServerName namevhost.example.com
		<Directory /namevhost/>
		Options Indexes FollowSymLinks
		AllowOverride None
		Require all granted
		</Directory>
		</VirtualHost>
	-	Create the new document root folder, and create the index.html file
		# mkdir /namevhost/
		# vi /namevhost/index.html
	-	Verify that SELinux permissions (if enabled) are correct
		# chcon -R --reference=<YOUR-DOCUMENT-ROOT> /namevhost

	-	Restart apache
		# systemctl restart httpd
27	-	Create the new secure folder
		#mkdir /var/www/html/secure/

	-	Create the following stanza to password protect the directory /etc/httpd/conf.d/secure-dir.conf
		<Location /secure/>
		AuthType Basic
		AuthName "Restricted Area"
		AuthUserFile secure.users
		Require valid-user
		</Location>

	- 	Create a password file and an entry for the user bob in the appropriate directory
		# htpasswd -c $FILENAME bob
		You may have to install apache2-utils if htpasswd does not exist
		Use /etc/httpd/secure.users

	-	Restart apache
		# systemctl restart httpd

	-	Verify that the directory is password protected and that bob is allowed to log in
28	-	Backup the original private key, if one exists.
		# mv /etc/pki/tls/private/localhost.key /etc/pki/tls/private/localhost.key.orig

	-	Create a new private key
		# /usr/bin/openssl genrsa -aes128 2048 > /etc/pki/tls/private/localhost.key

	-	Create a new self-signed SSL certificate
		# /usr/bin/openssl req -utf8 -new -key /etc/pki/tls/private/localhost.key -x509 -days 365 -out /etc/pki/tls/certs/localhost.crt -set_serial 0

	-	Restart Apache and test your new certificate. You may have to add ipvhost.example.com to your /etc/hosts file	
		# systemctl restart httpd
29	-	Create a new private key
		# /usr/bin/openssl genrsa -aes128 2048 > /etc/pki/tls/private/ipvhost.example.com.key

	-	Create a new CSR.
		# /usr/bin/openssl req -utf8 -new -key -key /etc/pki/tls/private/ipvhost.example.com.key  -out /etc/pki/tls/certs/ipvhost.example.com.csr	

	-	You must then send off this CSR to be signed by a Certificate Authority
